// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: customer.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/jjggzz/truss/deftree/googlethirdparty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type RegisterResult int32

const (
	RegisterResult_SUCCESS RegisterResult = 0
	RegisterResult_FAIL    RegisterResult = 1
)

var RegisterResult_name = map[int32]string{
	0: "SUCCESS",
	1: "FAIL",
}

var RegisterResult_value = map[string]int32{
	"SUCCESS": 0,
	"FAIL":    1,
}

func (x RegisterResult) String() string {
	return proto.EnumName(RegisterResult_name, int32(x))
}

func (RegisterResult) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9efa92dae3d6ec46, []int{0}
}

type RegisterByPhoneRequest struct {
	Phone string `protobuf:"bytes,1,opt,name=phone,proto3" json:"phone,omitempty"`
}

func (m *RegisterByPhoneRequest) Reset()         { *m = RegisterByPhoneRequest{} }
func (m *RegisterByPhoneRequest) String() string { return proto.CompactTextString(m) }
func (*RegisterByPhoneRequest) ProtoMessage()    {}
func (*RegisterByPhoneRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9efa92dae3d6ec46, []int{0}
}
func (m *RegisterByPhoneRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterByPhoneRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterByPhoneRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterByPhoneRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterByPhoneRequest.Merge(m, src)
}
func (m *RegisterByPhoneRequest) XXX_Size() int {
	return m.Size()
}
func (m *RegisterByPhoneRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterByPhoneRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterByPhoneRequest proto.InternalMessageInfo

func (m *RegisterByPhoneRequest) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

type RegisterByPhoneResponse struct {
	Result  RegisterResult `protobuf:"varint,1,opt,name=result,proto3,enum=proto.RegisterResult" json:"result,omitempty"`
	Message string         `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *RegisterByPhoneResponse) Reset()         { *m = RegisterByPhoneResponse{} }
func (m *RegisterByPhoneResponse) String() string { return proto.CompactTextString(m) }
func (*RegisterByPhoneResponse) ProtoMessage()    {}
func (*RegisterByPhoneResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9efa92dae3d6ec46, []int{1}
}
func (m *RegisterByPhoneResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterByPhoneResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterByPhoneResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterByPhoneResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterByPhoneResponse.Merge(m, src)
}
func (m *RegisterByPhoneResponse) XXX_Size() int {
	return m.Size()
}
func (m *RegisterByPhoneResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterByPhoneResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterByPhoneResponse proto.InternalMessageInfo

func (m *RegisterByPhoneResponse) GetResult() RegisterResult {
	if m != nil {
		return m.Result
	}
	return RegisterResult_SUCCESS
}

func (m *RegisterByPhoneResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterEnum("proto.RegisterResult", RegisterResult_name, RegisterResult_value)
	proto.RegisterType((*RegisterByPhoneRequest)(nil), "proto.RegisterByPhoneRequest")
	proto.RegisterType((*RegisterByPhoneResponse)(nil), "proto.RegisterByPhoneResponse")
}

func init() { proto.RegisterFile("customer.proto", fileDescriptor_9efa92dae3d6ec46) }

var fileDescriptor_9efa92dae3d6ec46 = []byte{
	// 319 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x90, 0xcd, 0x4a, 0xc3, 0x40,
	0x14, 0x85, 0x33, 0x62, 0x7f, 0x1c, 0x4b, 0x2c, 0x83, 0x3f, 0x21, 0xe0, 0x20, 0xd9, 0x28, 0x82,
	0x09, 0xd4, 0x27, 0xb0, 0xa5, 0x82, 0xe0, 0x42, 0x12, 0x7c, 0x80, 0x34, 0xbd, 0x4e, 0x53, 0x9a,
	0x99, 0x38, 0x73, 0xb3, 0x68, 0x1f, 0x42, 0x7c, 0x2c, 0x97, 0x5d, 0xba, 0x94, 0xf6, 0x45, 0xc4,
	0xa4, 0x15, 0x52, 0x71, 0x35, 0x7c, 0xdc, 0x73, 0xe6, 0xdc, 0x73, 0xa9, 0x9d, 0x14, 0x06, 0x55,
	0x06, 0xda, 0xcf, 0xb5, 0x42, 0xc5, 0x1a, 0xe5, 0xe3, 0xf6, 0x45, 0x8a, 0x93, 0x62, 0xe4, 0x27,
	0x2a, 0x0b, 0xa6, 0x53, 0x21, 0x16, 0x8b, 0x00, 0x75, 0x61, 0x4c, 0x30, 0x86, 0x17, 0xd4, 0x00,
	0x81, 0x50, 0x4a, 0xcc, 0x00, 0x27, 0xa9, 0x1e, 0xe7, 0xb1, 0xc6, 0x79, 0x10, 0x4b, 0xa9, 0x30,
	0xc6, 0x54, 0x49, 0x53, 0x7d, 0xe5, 0x76, 0x12, 0x95, 0x65, 0x4a, 0x56, 0xe4, 0xf9, 0xf4, 0x34,
	0x04, 0x91, 0x1a, 0x04, 0xdd, 0x9f, 0x3f, 0x4d, 0x94, 0x84, 0x10, 0x5e, 0x0b, 0x30, 0xc8, 0x8e,
	0x69, 0x23, 0xff, 0x61, 0x87, 0x5c, 0x90, 0xab, 0x83, 0xb0, 0x02, 0x6f, 0x44, 0xcf, 0xfe, 0xe8,
	0x4d, 0xae, 0xa4, 0x01, 0x76, 0x43, 0x9b, 0x1a, 0x4c, 0x31, 0xc3, 0xd2, 0x61, 0xf7, 0x4e, 0xaa,
	0x08, 0x7f, 0xab, 0x0f, 0xcb, 0x61, 0xb8, 0x11, 0x31, 0x87, 0xb6, 0x32, 0x30, 0x26, 0x16, 0xe0,
	0xec, 0x95, 0x09, 0x5b, 0xbc, 0xbe, 0xa4, 0x76, 0xdd, 0xc3, 0x0e, 0x69, 0x2b, 0x7a, 0x1e, 0x0c,
	0x86, 0x51, 0xd4, 0xb5, 0x58, 0x9b, 0xee, 0xdf, 0xdf, 0x3d, 0x3c, 0x76, 0x49, 0xef, 0x8d, 0xd0,
	0xf6, 0x60, 0x73, 0x28, 0x16, 0xd2, 0xa3, 0x9d, 0xcd, 0xd8, 0xf9, 0xce, 0x06, 0xf5, 0x86, 0x2e,
	0xff, 0x6f, 0x5c, 0x15, 0xf2, 0x2c, 0xe6, 0x53, 0x3b, 0x82, 0x19, 0x24, 0xf8, 0x9b, 0xd2, 0xd9,
	0x78, 0x86, 0x59, 0x8e, 0x73, 0xb7, 0x46, 0x9e, 0xd5, 0x77, 0x3e, 0x56, 0x9c, 0x2c, 0x57, 0x9c,
	0x7c, 0xad, 0x38, 0x79, 0x5f, 0x73, 0x6b, 0xb9, 0xe6, 0xd6, 0xe7, 0x9a, 0x5b, 0xa3, 0x66, 0x29,
	0xbc, 0xfd, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x0a, 0x66, 0xdb, 0x67, 0xd9, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CustomerClient is the client API for Customer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CustomerClient interface {
	RegisterByPhone(ctx context.Context, in *RegisterByPhoneRequest, opts ...grpc.CallOption) (*RegisterByPhoneResponse, error)
	SelectCustomer(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type customerClient struct {
	cc *grpc.ClientConn
}

func NewCustomerClient(cc *grpc.ClientConn) CustomerClient {
	return &customerClient{cc}
}

func (c *customerClient) RegisterByPhone(ctx context.Context, in *RegisterByPhoneRequest, opts ...grpc.CallOption) (*RegisterByPhoneResponse, error) {
	out := new(RegisterByPhoneResponse)
	err := c.cc.Invoke(ctx, "/proto.Customer/RegisterByPhone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerClient) SelectCustomer(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/proto.Customer/SelectCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomerServer is the server API for Customer service.
type CustomerServer interface {
	RegisterByPhone(context.Context, *RegisterByPhoneRequest) (*RegisterByPhoneResponse, error)
	SelectCustomer(context.Context, *Empty) (*Empty, error)
}

// UnimplementedCustomerServer can be embedded to have forward compatible implementations.
type UnimplementedCustomerServer struct {
}

func (*UnimplementedCustomerServer) RegisterByPhone(ctx context.Context, req *RegisterByPhoneRequest) (*RegisterByPhoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterByPhone not implemented")
}
func (*UnimplementedCustomerServer) SelectCustomer(ctx context.Context, req *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectCustomer not implemented")
}

func RegisterCustomerServer(s *grpc.Server, srv CustomerServer) {
	s.RegisterService(&_Customer_serviceDesc, srv)
}

func _Customer_RegisterByPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterByPhoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServer).RegisterByPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Customer/RegisterByPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServer).RegisterByPhone(ctx, req.(*RegisterByPhoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customer_SelectCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServer).SelectCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Customer/SelectCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServer).SelectCustomer(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Customer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Customer",
	HandlerType: (*CustomerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterByPhone",
			Handler:    _Customer_RegisterByPhone_Handler,
		},
		{
			MethodName: "SelectCustomer",
			Handler:    _Customer_SelectCustomer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "customer.proto",
}

func (m *RegisterByPhoneRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterByPhoneRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Phone) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCustomer(dAtA, i, uint64(len(m.Phone)))
		i += copy(dAtA[i:], m.Phone)
	}
	return i, nil
}

func (m *RegisterByPhoneResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterByPhoneResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCustomer(dAtA, i, uint64(m.Result))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCustomer(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	return i, nil
}

func encodeVarintCustomer(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *RegisterByPhoneRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovCustomer(uint64(l))
	}
	return n
}

func (m *RegisterByPhoneResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != 0 {
		n += 1 + sovCustomer(uint64(m.Result))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovCustomer(uint64(l))
	}
	return n
}

func sovCustomer(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCustomer(x uint64) (n int) {
	return sovCustomer(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RegisterByPhoneRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCustomer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterByPhoneRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterByPhoneRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCustomer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCustomer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCustomer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCustomer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCustomer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterByPhoneResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCustomer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterByPhoneResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterByPhoneResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= RegisterResult(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCustomer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCustomer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCustomer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCustomer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCustomer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCustomer(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCustomer
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCustomer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCustomer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCustomer
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthCustomer
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCustomer
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCustomer(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthCustomer
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCustomer = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCustomer   = fmt.Errorf("proto: integer overflow")
)
