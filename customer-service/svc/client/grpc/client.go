// Code generated by truss. DO NOT EDIT.
// Rerunning truss will overwrite this file.
// Version: a56d9007fd
// Version Date: Fri Dec 18 09:51:12 UTC 2020

// Package grpc provides a gRPC client for the Customer service.
package grpc

import (
	"context"
	"github.com/go-kit/kit/endpoint"
	"github.com/go-kit/kit/log"
	"github.com/go-kit/kit/sd"
	"github.com/go-kit/kit/sd/lb"
	kitzipkin "github.com/go-kit/kit/tracing/zipkin"
	grpctransport "github.com/go-kit/kit/transport/grpc"
	"github.com/openzipkin/zipkin-go"
	"github.com/pkg/errors"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
	"io"
	"time"

	// This Service
	pb "videoWeb/customer-service/proto"
	"videoWeb/customer-service/svc"
)

func NewLoadBalanceClient(instancer sd.Instancer, tracer *zipkin.Tracer, logger log.Logger) (pb.CustomerServer, error) {
	options := []grpctransport.ClientOption{}
	if tracer != nil {
		options = append(options, kitzipkin.GRPCClientTrace(tracer))
	}

	var endpoints svc.Endpoints
	{
		factory := factoryGRPCFor(svc.MakeRegisterByPhoneEndpoint, options...)
		endpointer := sd.NewEndpointer(instancer, factory, logger)
		balancer := lb.NewRoundRobin(endpointer)
		endpoints.RegisterByPhoneEndpoint = lb.Retry(3, time.Millisecond*3000, balancer)
	}

	{
		factory := factoryGRPCFor(svc.MakeLoginByPhoneEndpoint, options...)
		endpointer := sd.NewEndpointer(instancer, factory, logger)
		balancer := lb.NewRoundRobin(endpointer)
		endpoints.LoginByPhoneEndpoint = lb.Retry(3, time.Millisecond*3000, balancer)
	}

	{
		factory := factoryGRPCFor(svc.MakeGetCustomerInfoByTokenEndpoint, options...)
		endpointer := sd.NewEndpointer(instancer, factory, logger)
		balancer := lb.NewRoundRobin(endpointer)
		endpoints.GetCustomerInfoByTokenEndpoint = lb.Retry(3, time.Millisecond*3000, balancer)
	}

	return endpoints, nil
}

func factoryGRPCFor(makeEndpoint func(pb.CustomerServer) endpoint.Endpoint, clientOptions ...grpctransport.ClientOption) sd.Factory {
	return func(instance string) (endpoint.Endpoint, io.Closer, error) {
		conn, err := grpc.Dial(instance, grpc.WithInsecure())
		if err != nil {
			return nil, nil, err
		}
		server, err := New(conn, clientOptions)
		return makeEndpoint(server), conn, err
	}
}

// New returns an service backed by a gRPC client connection. It is the
// responsibility of the caller to dial, and later close, the connection.
func New(conn *grpc.ClientConn, clientOptions []grpctransport.ClientOption, options ...ClientOption) (pb.CustomerServer, error) {
	var cc clientConfig

	for _, f := range options {
		err := f(&cc)
		if err != nil {
			return nil, errors.Wrap(err, "cannot apply option")
		}
	}

	clientOptions = append(clientOptions, grpctransport.ClientBefore(contextValuesToGRPCMetadata(cc.headers)))

	//clientOptions := []grpctransport.ClientOption{
	//	grpctransport.ClientBefore(
	//		contextValuesToGRPCMetadata(cc.headers)),
	//}
	var registerbyphoneEndpoint endpoint.Endpoint
	{
		registerbyphoneEndpoint = grpctransport.NewClient(
			conn,
			"proto.Customer",
			"RegisterByPhone",
			EncodeGRPCRegisterByPhoneRequest,
			DecodeGRPCRegisterByPhoneResponse,
			pb.RegisterByPhoneResponse{},
			clientOptions...,
		).Endpoint()
	}

	var loginbyphoneEndpoint endpoint.Endpoint
	{
		loginbyphoneEndpoint = grpctransport.NewClient(
			conn,
			"proto.Customer",
			"LoginByPhone",
			EncodeGRPCLoginByPhoneRequest,
			DecodeGRPCLoginByPhoneResponse,
			pb.LoginByPhoneResponse{},
			clientOptions...,
		).Endpoint()
	}

	var getcustomerinfobytokenEndpoint endpoint.Endpoint
	{
		getcustomerinfobytokenEndpoint = grpctransport.NewClient(
			conn,
			"proto.Customer",
			"GetCustomerInfoByToken",
			EncodeGRPCGetCustomerInfoByTokenRequest,
			DecodeGRPCGetCustomerInfoByTokenResponse,
			pb.GetCustomerInfoByTokenResponse{},
			clientOptions...,
		).Endpoint()
	}

	return svc.Endpoints{
		RegisterByPhoneEndpoint:        registerbyphoneEndpoint,
		LoginByPhoneEndpoint:           loginbyphoneEndpoint,
		GetCustomerInfoByTokenEndpoint: getcustomerinfobytokenEndpoint,
	}, nil
}

// GRPC Client Decode

// DecodeGRPCRegisterByPhoneResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC registerbyphone reply to a user-domain registerbyphone response. Primarily useful in a client.
func DecodeGRPCRegisterByPhoneResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.RegisterByPhoneResponse)
	return reply, nil
}

// DecodeGRPCLoginByPhoneResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC loginbyphone reply to a user-domain loginbyphone response. Primarily useful in a client.
func DecodeGRPCLoginByPhoneResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.LoginByPhoneResponse)
	return reply, nil
}

// DecodeGRPCGetCustomerInfoByTokenResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC getcustomerinfobytoken reply to a user-domain getcustomerinfobytoken response. Primarily useful in a client.
func DecodeGRPCGetCustomerInfoByTokenResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.GetCustomerInfoByTokenResponse)
	return reply, nil
}

// GRPC Client Encode

// EncodeGRPCRegisterByPhoneRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain registerbyphone request to a gRPC registerbyphone request. Primarily useful in a client.
func EncodeGRPCRegisterByPhoneRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.RegisterByPhoneRequest)
	return req, nil
}

// EncodeGRPCLoginByPhoneRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain loginbyphone request to a gRPC loginbyphone request. Primarily useful in a client.
func EncodeGRPCLoginByPhoneRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.LoginByPhoneRequest)
	return req, nil
}

// EncodeGRPCGetCustomerInfoByTokenRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain getcustomerinfobytoken request to a gRPC getcustomerinfobytoken request. Primarily useful in a client.
func EncodeGRPCGetCustomerInfoByTokenRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.GetCustomerInfoByTokenRequest)
	return req, nil
}

type clientConfig struct {
	headers []string
}

// ClientOption is a function that modifies the client config
type ClientOption func(*clientConfig) error

func CtxValuesToSend(keys ...string) ClientOption {
	return func(o *clientConfig) error {
		o.headers = keys
		return nil
	}
}

func contextValuesToGRPCMetadata(keys []string) grpctransport.ClientRequestFunc {
	return func(ctx context.Context, md *metadata.MD) context.Context {
		var pairs []string
		for _, k := range keys {
			if v, ok := ctx.Value(k).(string); ok {
				pairs = append(pairs, k, v)
			}
		}

		if pairs != nil {
			*md = metadata.Join(*md, metadata.Pairs(pairs...))
		}

		return ctx
	}
}
