// Code generated by truss. DO NOT EDIT.
// Rerunning truss will overwrite this file.
// Version: 1b850652b8
// Version Date: 2020-12-13T03:19:12Z

package svc

// This file provides server-side bindings for the gRPC transport.
// It utilizes the transport/grpc.Server.

import (
	"context"
	"net/http"

	"google.golang.org/grpc/metadata"

	grpctransport "github.com/go-kit/kit/transport/grpc"

	// This Service
	pb "videoWeb/customer-service/proto"
)

// MakeGRPCServer makes a set of endpoints available as a gRPC CustomerServer.
func MakeGRPCServer(endpoints Endpoints, options ...grpctransport.ServerOption) pb.CustomerServer {
	serverOptions := []grpctransport.ServerOption{
		grpctransport.ServerBefore(metadataToContext),
	}
	serverOptions = append(serverOptions, options...)
	return &grpcServer{
		// customer

		registerbyphone: grpctransport.NewServer(
			endpoints.RegisterByPhoneEndpoint,
			DecodeGRPCRegisterByPhoneRequest,
			EncodeGRPCRegisterByPhoneResponse,
			serverOptions...,
		),
		selectcustomer: grpctransport.NewServer(
			endpoints.SelectCustomerEndpoint,
			DecodeGRPCSelectCustomerRequest,
			EncodeGRPCSelectCustomerResponse,
			serverOptions...,
		),
	}
}

// grpcServer implements the CustomerServer interface
type grpcServer struct {
	registerbyphone grpctransport.Handler
	selectcustomer  grpctransport.Handler
}

// Methods for grpcServer to implement CustomerServer interface

func (s *grpcServer) RegisterByPhone(ctx context.Context, req *pb.RegisterByPhoneRequest) (*pb.RegisterByPhoneResponse, error) {
	_, rep, err := s.registerbyphone.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.RegisterByPhoneResponse), nil
}

func (s *grpcServer) SelectCustomer(ctx context.Context, req *pb.Empty) (*pb.Empty, error) {
	_, rep, err := s.selectcustomer.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.Empty), nil
}

// Server Decode

// DecodeGRPCRegisterByPhoneRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC registerbyphone request to a user-domain registerbyphone request. Primarily useful in a server.
func DecodeGRPCRegisterByPhoneRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.RegisterByPhoneRequest)
	return req, nil
}

// DecodeGRPCSelectCustomerRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC selectcustomer request to a user-domain selectcustomer request. Primarily useful in a server.
func DecodeGRPCSelectCustomerRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.Empty)
	return req, nil
}

// Server Encode

// EncodeGRPCRegisterByPhoneResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain registerbyphone response to a gRPC registerbyphone reply. Primarily useful in a server.
func EncodeGRPCRegisterByPhoneResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.RegisterByPhoneResponse)
	return resp, nil
}

// EncodeGRPCSelectCustomerResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain selectcustomer response to a gRPC selectcustomer reply. Primarily useful in a server.
func EncodeGRPCSelectCustomerResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.Empty)
	return resp, nil
}

// Helpers

func metadataToContext(ctx context.Context, md metadata.MD) context.Context {
	for k, v := range md {
		if v != nil {
			// The key is added both in metadata format (k) which is all lower
			// and the http.CanonicalHeaderKey of the key so that it can be
			// accessed in either format
			ctx = context.WithValue(ctx, k, v[0])
			ctx = context.WithValue(ctx, http.CanonicalHeaderKey(k), v[0])
		}
	}

	return ctx
}
