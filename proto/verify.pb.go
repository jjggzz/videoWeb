// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: verify.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/metaverse/truss/deftree/googlethirdparty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// 验证码类型 手机号码 邮箱
type VerifyTargetType int32

const (
	VerifyTargetType_PHONE VerifyTargetType = 0
	VerifyTargetType_EMAIL VerifyTargetType = 1
)

var VerifyTargetType_name = map[int32]string{
	0: "PHONE",
	1: "EMAIL",
}

var VerifyTargetType_value = map[string]int32{
	"PHONE": 0,
	"EMAIL": 1,
}

func (x VerifyTargetType) String() string {
	return proto.EnumName(VerifyTargetType_name, int32(x))
}

func (VerifyTargetType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a87721bac73e05a3, []int{0}
}

type VerifyCheckResults int32

const (
	VerifyCheckResults_SUCCESS VerifyCheckResults = 0
	VerifyCheckResults_FAIL    VerifyCheckResults = 1
)

var VerifyCheckResults_name = map[int32]string{
	0: "SUCCESS",
	1: "FAIL",
}

var VerifyCheckResults_value = map[string]int32{
	"SUCCESS": 0,
	"FAIL":    1,
}

func (x VerifyCheckResults) String() string {
	return proto.EnumName(VerifyCheckResults_name, int32(x))
}

func (VerifyCheckResults) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a87721bac73e05a3, []int{1}
}

// target:验证码目标,可能是邮箱或者手机号码
// type:决定了target的类型
type SendVerifyCodeRequest struct {
	Target string           `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	Type   VerifyTargetType `protobuf:"varint,2,opt,name=type,proto3,enum=proto.VerifyTargetType" json:"type,omitempty"`
}

func (m *SendVerifyCodeRequest) Reset()         { *m = SendVerifyCodeRequest{} }
func (m *SendVerifyCodeRequest) String() string { return proto.CompactTextString(m) }
func (*SendVerifyCodeRequest) ProtoMessage()    {}
func (*SendVerifyCodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a87721bac73e05a3, []int{0}
}
func (m *SendVerifyCodeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SendVerifyCodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SendVerifyCodeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SendVerifyCodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendVerifyCodeRequest.Merge(m, src)
}
func (m *SendVerifyCodeRequest) XXX_Size() int {
	return m.Size()
}
func (m *SendVerifyCodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SendVerifyCodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SendVerifyCodeRequest proto.InternalMessageInfo

func (m *SendVerifyCodeRequest) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

func (m *SendVerifyCodeRequest) GetType() VerifyTargetType {
	if m != nil {
		return m.Type
	}
	return VerifyTargetType_PHONE
}

// target:验证码目标,可能是邮箱或者手机号码
// type:决定了target的类型
// code:提交的验证码值
type CheckVerifyCodeRequest struct {
	Target string           `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	Code   string           `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Type   VerifyTargetType `protobuf:"varint,3,opt,name=type,proto3,enum=proto.VerifyTargetType" json:"type,omitempty"`
}

func (m *CheckVerifyCodeRequest) Reset()         { *m = CheckVerifyCodeRequest{} }
func (m *CheckVerifyCodeRequest) String() string { return proto.CompactTextString(m) }
func (*CheckVerifyCodeRequest) ProtoMessage()    {}
func (*CheckVerifyCodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a87721bac73e05a3, []int{1}
}
func (m *CheckVerifyCodeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckVerifyCodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckVerifyCodeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheckVerifyCodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckVerifyCodeRequest.Merge(m, src)
}
func (m *CheckVerifyCodeRequest) XXX_Size() int {
	return m.Size()
}
func (m *CheckVerifyCodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckVerifyCodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CheckVerifyCodeRequest proto.InternalMessageInfo

func (m *CheckVerifyCodeRequest) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

func (m *CheckVerifyCodeRequest) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *CheckVerifyCodeRequest) GetType() VerifyTargetType {
	if m != nil {
		return m.Type
	}
	return VerifyTargetType_PHONE
}

type CheckVerifyCodeResponse struct {
	Result  VerifyCheckResults `protobuf:"varint,1,opt,name=result,proto3,enum=proto.VerifyCheckResults" json:"result,omitempty"`
	Message string             `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *CheckVerifyCodeResponse) Reset()         { *m = CheckVerifyCodeResponse{} }
func (m *CheckVerifyCodeResponse) String() string { return proto.CompactTextString(m) }
func (*CheckVerifyCodeResponse) ProtoMessage()    {}
func (*CheckVerifyCodeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a87721bac73e05a3, []int{2}
}
func (m *CheckVerifyCodeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckVerifyCodeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckVerifyCodeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheckVerifyCodeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckVerifyCodeResponse.Merge(m, src)
}
func (m *CheckVerifyCodeResponse) XXX_Size() int {
	return m.Size()
}
func (m *CheckVerifyCodeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckVerifyCodeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CheckVerifyCodeResponse proto.InternalMessageInfo

func (m *CheckVerifyCodeResponse) GetResult() VerifyCheckResults {
	if m != nil {
		return m.Result
	}
	return VerifyCheckResults_SUCCESS
}

func (m *CheckVerifyCodeResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterEnum("proto.VerifyTargetType", VerifyTargetType_name, VerifyTargetType_value)
	proto.RegisterEnum("proto.VerifyCheckResults", VerifyCheckResults_name, VerifyCheckResults_value)
	proto.RegisterType((*SendVerifyCodeRequest)(nil), "proto.SendVerifyCodeRequest")
	proto.RegisterType((*CheckVerifyCodeRequest)(nil), "proto.CheckVerifyCodeRequest")
	proto.RegisterType((*CheckVerifyCodeResponse)(nil), "proto.CheckVerifyCodeResponse")
}

func init() { proto.RegisterFile("verify.proto", fileDescriptor_a87721bac73e05a3) }

var fileDescriptor_a87721bac73e05a3 = []byte{
	// 395 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0xdf, 0x8a, 0xd3, 0x40,
	0x14, 0xc6, 0x33, 0xda, 0xcd, 0xda, 0x63, 0xa9, 0x61, 0xc0, 0xdd, 0x18, 0x34, 0x2c, 0xb9, 0x2a,
	0xbb, 0xd0, 0x60, 0xbd, 0x17, 0x34, 0x44, 0x14, 0xfc, 0x47, 0xb2, 0x7a, 0xe5, 0x4d, 0x36, 0x39,
	0x4d, 0x83, 0x9b, 0x4c, 0x3a, 0x33, 0x29, 0xe4, 0x2d, 0x7c, 0x00, 0x1f, 0xc8, 0xcb, 0x5e, 0x7a,
	0x29, 0xed, 0x8b, 0x88, 0x33, 0xa9, 0xd0, 0x3f, 0x0b, 0xbd, 0x9a, 0x39, 0x9c, 0xef, 0x7c, 0xbf,
	0xc3, 0xf9, 0x60, 0xb0, 0x40, 0x5e, 0x4c, 0xdb, 0x71, 0xcd, 0x99, 0x64, 0xf4, 0x44, 0x3d, 0x4e,
	0x98, 0x17, 0x72, 0xd6, 0xdc, 0x8c, 0x53, 0x56, 0xfa, 0x25, 0xca, 0x64, 0x81, 0x5c, 0xa0, 0x2f,
	0x79, 0x23, 0x84, 0x9f, 0xe1, 0x54, 0x72, 0x44, 0x3f, 0x67, 0x2c, 0xbf, 0x45, 0x39, 0x2b, 0x78,
	0x56, 0x27, 0x5c, 0xb6, 0x7e, 0x52, 0x55, 0x4c, 0x26, 0xb2, 0x60, 0x95, 0xd0, 0x6e, 0xce, 0x20,
	0x65, 0x65, 0xc9, 0x2a, 0x5d, 0x79, 0xdf, 0xe0, 0x71, 0x8c, 0x55, 0xf6, 0x55, 0xf1, 0x02, 0x96,
	0x61, 0x84, 0xf3, 0x06, 0x85, 0xa4, 0x67, 0x60, 0xca, 0x84, 0xe7, 0x28, 0x6d, 0x72, 0x41, 0x46,
	0xfd, 0xa8, 0xab, 0xe8, 0x15, 0xf4, 0x64, 0x5b, 0xa3, 0x7d, 0xef, 0x82, 0x8c, 0x86, 0x93, 0x73,
	0x6d, 0x33, 0xd6, 0xf3, 0xd7, 0x4a, 0x72, 0xdd, 0xd6, 0x18, 0x29, 0x91, 0x37, 0x87, 0xb3, 0x60,
	0x86, 0xe9, 0xf7, 0xe3, 0xed, 0x29, 0xf4, 0x52, 0x96, 0x69, 0xfb, 0x7e, 0xa4, 0xfe, 0xff, 0x91,
	0xf7, 0x8f, 0x41, 0x4e, 0xe1, 0x7c, 0x0f, 0x29, 0x6a, 0x56, 0x09, 0xa4, 0xcf, 0xc1, 0xe4, 0x28,
	0x9a, 0x5b, 0xcd, 0x1c, 0x4e, 0x9e, 0x6c, 0x39, 0xa9, 0xa9, 0x48, 0xf5, 0x45, 0xd4, 0x09, 0xa9,
	0x0d, 0xa7, 0x25, 0x0a, 0x91, 0xe4, 0x9b, 0x8d, 0x36, 0xe5, 0xe5, 0x08, 0xac, 0xdd, 0x0d, 0x68,
	0x1f, 0x4e, 0x3e, 0xbf, 0xfd, 0xf4, 0x31, 0xb4, 0x8c, 0x7f, 0xdf, 0xf0, 0xc3, 0xab, 0x77, 0xef,
	0x2d, 0x72, 0x79, 0x05, 0x74, 0x9f, 0x40, 0x1f, 0xc2, 0x69, 0xfc, 0x25, 0x08, 0xc2, 0x38, 0xb6,
	0x0c, 0xfa, 0x00, 0x7a, 0x6f, 0x94, 0x78, 0xf2, 0x93, 0x80, 0xa9, 0xd5, 0xf4, 0x25, 0x0c, 0xb7,
	0xa3, 0xa1, 0x4f, 0xbb, 0x85, 0x0f, 0x26, 0xe6, 0x0c, 0xba, 0x6e, 0x58, 0xd6, 0xb2, 0xf5, 0x0c,
	0x1a, 0xc1, 0xa3, 0x9d, 0x4b, 0xd0, 0x67, 0x9d, 0xe4, 0x70, 0x28, 0x8e, 0x7b, 0x57, 0x5b, 0x1f,
	0xd0, 0x33, 0x5e, 0xdb, 0xbf, 0x56, 0x2e, 0x59, 0xae, 0x5c, 0xf2, 0x67, 0xe5, 0x92, 0x1f, 0x6b,
	0xd7, 0x58, 0xae, 0x5d, 0xe3, 0xf7, 0xda, 0x35, 0x6e, 0x4c, 0x35, 0xfa, 0xe2, 0x6f, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xcf, 0xc7, 0xdb, 0x1e, 0xbb, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// VerifyClient is the client API for Verify service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VerifyClient interface {
	SendVerifyCode(ctx context.Context, in *SendVerifyCodeRequest, opts ...grpc.CallOption) (*Empty, error)
	CheckVerifyCode(ctx context.Context, in *CheckVerifyCodeRequest, opts ...grpc.CallOption) (*CheckVerifyCodeResponse, error)
}

type verifyClient struct {
	cc *grpc.ClientConn
}

func NewVerifyClient(cc *grpc.ClientConn) VerifyClient {
	return &verifyClient{cc}
}

func (c *verifyClient) SendVerifyCode(ctx context.Context, in *SendVerifyCodeRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/proto.Verify/SendVerifyCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *verifyClient) CheckVerifyCode(ctx context.Context, in *CheckVerifyCodeRequest, opts ...grpc.CallOption) (*CheckVerifyCodeResponse, error) {
	out := new(CheckVerifyCodeResponse)
	err := c.cc.Invoke(ctx, "/proto.Verify/CheckVerifyCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VerifyServer is the server API for Verify service.
type VerifyServer interface {
	SendVerifyCode(context.Context, *SendVerifyCodeRequest) (*Empty, error)
	CheckVerifyCode(context.Context, *CheckVerifyCodeRequest) (*CheckVerifyCodeResponse, error)
}

// UnimplementedVerifyServer can be embedded to have forward compatible implementations.
type UnimplementedVerifyServer struct {
}

func (*UnimplementedVerifyServer) SendVerifyCode(ctx context.Context, req *SendVerifyCodeRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendVerifyCode not implemented")
}
func (*UnimplementedVerifyServer) CheckVerifyCode(ctx context.Context, req *CheckVerifyCodeRequest) (*CheckVerifyCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckVerifyCode not implemented")
}

func RegisterVerifyServer(s *grpc.Server, srv VerifyServer) {
	s.RegisterService(&_Verify_serviceDesc, srv)
}

func _Verify_SendVerifyCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendVerifyCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerifyServer).SendVerifyCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Verify/SendVerifyCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerifyServer).SendVerifyCode(ctx, req.(*SendVerifyCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Verify_CheckVerifyCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckVerifyCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerifyServer).CheckVerifyCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Verify/CheckVerifyCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerifyServer).CheckVerifyCode(ctx, req.(*CheckVerifyCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Verify_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Verify",
	HandlerType: (*VerifyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendVerifyCode",
			Handler:    _Verify_SendVerifyCode_Handler,
		},
		{
			MethodName: "CheckVerifyCode",
			Handler:    _Verify_CheckVerifyCode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "verify.proto",
}

func (m *SendVerifyCodeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendVerifyCodeRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Target) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintVerify(dAtA, i, uint64(len(m.Target)))
		i += copy(dAtA[i:], m.Target)
	}
	if m.Type != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVerify(dAtA, i, uint64(m.Type))
	}
	return i, nil
}

func (m *CheckVerifyCodeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckVerifyCodeRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Target) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintVerify(dAtA, i, uint64(len(m.Target)))
		i += copy(dAtA[i:], m.Target)
	}
	if len(m.Code) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintVerify(dAtA, i, uint64(len(m.Code)))
		i += copy(dAtA[i:], m.Code)
	}
	if m.Type != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVerify(dAtA, i, uint64(m.Type))
	}
	return i, nil
}

func (m *CheckVerifyCodeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckVerifyCodeResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVerify(dAtA, i, uint64(m.Result))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintVerify(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	return i, nil
}

func encodeVarintVerify(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *SendVerifyCodeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Target)
	if l > 0 {
		n += 1 + l + sovVerify(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovVerify(uint64(m.Type))
	}
	return n
}

func (m *CheckVerifyCodeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Target)
	if l > 0 {
		n += 1 + l + sovVerify(uint64(l))
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovVerify(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovVerify(uint64(m.Type))
	}
	return n
}

func (m *CheckVerifyCodeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != 0 {
		n += 1 + sovVerify(uint64(m.Result))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovVerify(uint64(l))
	}
	return n
}

func sovVerify(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozVerify(x uint64) (n int) {
	return sovVerify(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SendVerifyCodeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVerify
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendVerifyCodeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendVerifyCodeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerify
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVerify
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVerify
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Target = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerify
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= VerifyTargetType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVerify(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVerify
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVerify
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckVerifyCodeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVerify
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckVerifyCodeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckVerifyCodeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerify
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVerify
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVerify
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Target = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerify
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVerify
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVerify
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerify
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= VerifyTargetType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVerify(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVerify
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVerify
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckVerifyCodeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVerify
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckVerifyCodeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckVerifyCodeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerify
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= VerifyCheckResults(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerify
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVerify
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVerify
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVerify(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVerify
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVerify
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVerify(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVerify
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVerify
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVerify
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthVerify
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthVerify
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowVerify
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipVerify(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthVerify
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthVerify = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVerify   = fmt.Errorf("proto: integer overflow")
)
