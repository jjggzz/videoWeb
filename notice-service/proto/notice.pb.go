// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: notice.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// 短信的策略
// 1验证码短信
// 2推广短信
// ...
type SmsStrategy int32

const (
	SmsStrategy_verify SmsStrategy = 0
)

var SmsStrategy_name = map[int32]string{
	0: "verify",
}

var SmsStrategy_value = map[string]int32{
	"verify": 0,
}

func (x SmsStrategy) String() string {
	return proto.EnumName(SmsStrategy_name, int32(x))
}

func (SmsStrategy) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_642492014393dbdb, []int{0}
}

// SMTP类型
type SMTPStrategy int32

const (
	SMTPStrategy_QQ SMTPStrategy = 0
)

var SMTPStrategy_name = map[int32]string{
	0: "QQ",
}

var SMTPStrategy_value = map[string]int32{
	"QQ": 0,
}

func (x SMTPStrategy) String() string {
	return proto.EnumName(SMTPStrategy_name, int32(x))
}

func (SMTPStrategy) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_642492014393dbdb, []int{1}
}

type SendSmsRequest struct {
	// 策略
	Strategy SmsStrategy `protobuf:"varint,1,opt,name=strategy,proto3,enum=proto.SmsStrategy" json:"strategy,omitempty"`
	// 内容
	Body string `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
	// 手机号码列表
	Phone []string `protobuf:"bytes,3,rep,name=phone,proto3" json:"phone,omitempty"`
}

func (m *SendSmsRequest) Reset()         { *m = SendSmsRequest{} }
func (m *SendSmsRequest) String() string { return proto.CompactTextString(m) }
func (*SendSmsRequest) ProtoMessage()    {}
func (*SendSmsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_642492014393dbdb, []int{0}
}
func (m *SendSmsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SendSmsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SendSmsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SendSmsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendSmsRequest.Merge(m, src)
}
func (m *SendSmsRequest) XXX_Size() int {
	return m.Size()
}
func (m *SendSmsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SendSmsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SendSmsRequest proto.InternalMessageInfo

func (m *SendSmsRequest) GetStrategy() SmsStrategy {
	if m != nil {
		return m.Strategy
	}
	return SmsStrategy_verify
}

func (m *SendSmsRequest) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func (m *SendSmsRequest) GetPhone() []string {
	if m != nil {
		return m.Phone
	}
	return nil
}

type SendSmsResponse struct {
	Code int64 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
}

func (m *SendSmsResponse) Reset()         { *m = SendSmsResponse{} }
func (m *SendSmsResponse) String() string { return proto.CompactTextString(m) }
func (*SendSmsResponse) ProtoMessage()    {}
func (*SendSmsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_642492014393dbdb, []int{1}
}
func (m *SendSmsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SendSmsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SendSmsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SendSmsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendSmsResponse.Merge(m, src)
}
func (m *SendSmsResponse) XXX_Size() int {
	return m.Size()
}
func (m *SendSmsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SendSmsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SendSmsResponse proto.InternalMessageInfo

func (m *SendSmsResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

type SendEmailRequest struct {
	// SMTP
	Strategy SMTPStrategy `protobuf:"varint,1,opt,name=strategy,proto3,enum=proto.SMTPStrategy" json:"strategy,omitempty"`
	// 标题
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// 内容
	Body string `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
	// 收件人列表
	RecipientList []string `protobuf:"bytes,4,rep,name=recipientList,proto3" json:"recipientList,omitempty"`
}

func (m *SendEmailRequest) Reset()         { *m = SendEmailRequest{} }
func (m *SendEmailRequest) String() string { return proto.CompactTextString(m) }
func (*SendEmailRequest) ProtoMessage()    {}
func (*SendEmailRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_642492014393dbdb, []int{2}
}
func (m *SendEmailRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SendEmailRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SendEmailRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SendEmailRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendEmailRequest.Merge(m, src)
}
func (m *SendEmailRequest) XXX_Size() int {
	return m.Size()
}
func (m *SendEmailRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SendEmailRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SendEmailRequest proto.InternalMessageInfo

func (m *SendEmailRequest) GetStrategy() SMTPStrategy {
	if m != nil {
		return m.Strategy
	}
	return SMTPStrategy_QQ
}

func (m *SendEmailRequest) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *SendEmailRequest) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func (m *SendEmailRequest) GetRecipientList() []string {
	if m != nil {
		return m.RecipientList
	}
	return nil
}

type SendEmailResponse struct {
	Code int64 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
}

func (m *SendEmailResponse) Reset()         { *m = SendEmailResponse{} }
func (m *SendEmailResponse) String() string { return proto.CompactTextString(m) }
func (*SendEmailResponse) ProtoMessage()    {}
func (*SendEmailResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_642492014393dbdb, []int{3}
}
func (m *SendEmailResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SendEmailResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SendEmailResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SendEmailResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendEmailResponse.Merge(m, src)
}
func (m *SendEmailResponse) XXX_Size() int {
	return m.Size()
}
func (m *SendEmailResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SendEmailResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SendEmailResponse proto.InternalMessageInfo

func (m *SendEmailResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func init() {
	proto.RegisterEnum("proto.SmsStrategy", SmsStrategy_name, SmsStrategy_value)
	proto.RegisterEnum("proto.SMTPStrategy", SMTPStrategy_name, SMTPStrategy_value)
	proto.RegisterType((*SendSmsRequest)(nil), "proto.SendSmsRequest")
	proto.RegisterType((*SendSmsResponse)(nil), "proto.SendSmsResponse")
	proto.RegisterType((*SendEmailRequest)(nil), "proto.SendEmailRequest")
	proto.RegisterType((*SendEmailResponse)(nil), "proto.SendEmailResponse")
}

func init() { proto.RegisterFile("notice.proto", fileDescriptor_642492014393dbdb) }

var fileDescriptor_642492014393dbdb = []byte{
	// 336 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0xcd, 0x4e, 0xf2, 0x40,
	0x14, 0x86, 0x3b, 0x14, 0xfa, 0x7d, 0x1c, 0x11, 0xf1, 0x88, 0x58, 0x59, 0x34, 0xa4, 0xd1, 0x48,
	0x58, 0x60, 0x82, 0x3b, 0x57, 0xc6, 0xc4, 0x9d, 0x1a, 0x69, 0xbd, 0x01, 0x7e, 0x8e, 0x3a, 0x06,
	0x3a, 0xb5, 0x33, 0x9a, 0x70, 0x03, 0xae, 0x4d, 0xbc, 0x29, 0x97, 0x2c, 0x5d, 0x1a, 0xb8, 0x11,
	0xc3, 0x94, 0x36, 0x45, 0x74, 0xd5, 0xf3, 0xf7, 0xf6, 0x3c, 0xf3, 0x1e, 0x28, 0x05, 0x42, 0xf1,
	0x01, 0xb5, 0xc3, 0x48, 0x28, 0x81, 0x05, 0xfd, 0x71, 0x1f, 0xa1, 0xec, 0x53, 0x30, 0xf4, 0xc7,
	0xd2, 0xa3, 0xa7, 0x67, 0x92, 0x0a, 0xdb, 0xf0, 0x5f, 0xaa, 0xa8, 0xa7, 0xe8, 0x7e, 0x62, 0xb3,
	0x06, 0x6b, 0x96, 0x3b, 0x18, 0x4b, 0xda, 0xfe, 0x58, 0xfa, 0xcb, 0x8e, 0x97, 0xce, 0x20, 0x42,
	0xbe, 0x2f, 0x86, 0x13, 0x3b, 0xd7, 0x60, 0xcd, 0xa2, 0xa7, 0x63, 0xac, 0x42, 0x21, 0x7c, 0x10,
	0x01, 0xd9, 0x66, 0xc3, 0x6c, 0x16, 0xbd, 0x38, 0x71, 0x0f, 0x61, 0x2b, 0xdd, 0x25, 0x43, 0x11,
	0x48, 0x5a, 0x88, 0x07, 0x62, 0x48, 0x7a, 0x91, 0xe9, 0xe9, 0xd8, 0x7d, 0x67, 0x50, 0x59, 0xcc,
	0x5d, 0x8c, 0x7b, 0x7c, 0x94, 0x50, 0x1d, 0xaf, 0x51, 0xed, 0x24, 0x54, 0x57, 0xb7, 0x37, 0xbf,
	0x60, 0x55, 0xa1, 0xa0, 0xb8, 0x1a, 0xd1, 0x92, 0x2b, 0x4e, 0x52, 0x58, 0x33, 0x03, 0x7b, 0x00,
	0x9b, 0x11, 0x0d, 0x78, 0xc8, 0x29, 0x50, 0x97, 0x5c, 0x2a, 0x3b, 0xaf, 0xa1, 0x57, 0x8b, 0xee,
	0x11, 0x6c, 0x67, 0xa0, 0xfe, 0xc6, 0x6f, 0xed, 0xc3, 0x46, 0xc6, 0x28, 0x04, 0xb0, 0x5e, 0x28,
	0xe2, 0x77, 0x93, 0x8a, 0xd1, 0xaa, 0x41, 0x29, 0x4b, 0x8b, 0x16, 0xe4, 0xba, 0xdd, 0x8a, 0xd1,
	0x79, 0x65, 0x60, 0x5d, 0xeb, 0xe3, 0xe0, 0x29, 0xfc, 0x5b, 0x7a, 0x84, 0xbb, 0xc9, 0x03, 0x57,
	0xee, 0x53, 0xaf, 0xfd, 0x2c, 0xc7, 0x2c, 0xae, 0x81, 0x67, 0x50, 0x4c, 0x11, 0x71, 0x2f, 0x33,
	0x96, 0x75, 0xb2, 0x6e, 0xaf, 0x37, 0x92, 0x3f, 0x9c, 0xdb, 0x1f, 0x33, 0x87, 0x4d, 0x67, 0x0e,
	0xfb, 0x9a, 0x39, 0xec, 0x6d, 0xee, 0x18, 0xd3, 0xb9, 0x63, 0x7c, 0xce, 0x1d, 0xa3, 0x6f, 0x69,
	0xd1, 0xc9, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc6, 0x65, 0x97, 0xc3, 0x45, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NoticeClient is the client API for Notice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NoticeClient interface {
	SendSms(ctx context.Context, in *SendSmsRequest, opts ...grpc.CallOption) (*SendSmsResponse, error)
	SendEmail(ctx context.Context, in *SendEmailRequest, opts ...grpc.CallOption) (*SendEmailResponse, error)
}

type noticeClient struct {
	cc *grpc.ClientConn
}

func NewNoticeClient(cc *grpc.ClientConn) NoticeClient {
	return &noticeClient{cc}
}

func (c *noticeClient) SendSms(ctx context.Context, in *SendSmsRequest, opts ...grpc.CallOption) (*SendSmsResponse, error) {
	out := new(SendSmsResponse)
	err := c.cc.Invoke(ctx, "/proto.Notice/SendSms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noticeClient) SendEmail(ctx context.Context, in *SendEmailRequest, opts ...grpc.CallOption) (*SendEmailResponse, error) {
	out := new(SendEmailResponse)
	err := c.cc.Invoke(ctx, "/proto.Notice/SendEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NoticeServer is the server API for Notice service.
type NoticeServer interface {
	SendSms(context.Context, *SendSmsRequest) (*SendSmsResponse, error)
	SendEmail(context.Context, *SendEmailRequest) (*SendEmailResponse, error)
}

// UnimplementedNoticeServer can be embedded to have forward compatible implementations.
type UnimplementedNoticeServer struct {
}

func (*UnimplementedNoticeServer) SendSms(ctx context.Context, req *SendSmsRequest) (*SendSmsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSms not implemented")
}
func (*UnimplementedNoticeServer) SendEmail(ctx context.Context, req *SendEmailRequest) (*SendEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEmail not implemented")
}

func RegisterNoticeServer(s *grpc.Server, srv NoticeServer) {
	s.RegisterService(&_Notice_serviceDesc, srv)
}

func _Notice_SendSms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendSmsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoticeServer).SendSms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Notice/SendSms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoticeServer).SendSms(ctx, req.(*SendSmsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notice_SendEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoticeServer).SendEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Notice/SendEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoticeServer).SendEmail(ctx, req.(*SendEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Notice_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Notice",
	HandlerType: (*NoticeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendSms",
			Handler:    _Notice_SendSms_Handler,
		},
		{
			MethodName: "SendEmail",
			Handler:    _Notice_SendEmail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "notice.proto",
}

func (m *SendSmsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendSmsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Strategy != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNotice(dAtA, i, uint64(m.Strategy))
	}
	if len(m.Body) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNotice(dAtA, i, uint64(len(m.Body)))
		i += copy(dAtA[i:], m.Body)
	}
	if len(m.Phone) > 0 {
		for _, s := range m.Phone {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *SendSmsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendSmsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNotice(dAtA, i, uint64(m.Code))
	}
	return i, nil
}

func (m *SendEmailRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendEmailRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Strategy != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNotice(dAtA, i, uint64(m.Strategy))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNotice(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.Body) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintNotice(dAtA, i, uint64(len(m.Body)))
		i += copy(dAtA[i:], m.Body)
	}
	if len(m.RecipientList) > 0 {
		for _, s := range m.RecipientList {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *SendEmailResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendEmailResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNotice(dAtA, i, uint64(m.Code))
	}
	return i, nil
}

func encodeVarintNotice(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *SendSmsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Strategy != 0 {
		n += 1 + sovNotice(uint64(m.Strategy))
	}
	l = len(m.Body)
	if l > 0 {
		n += 1 + l + sovNotice(uint64(l))
	}
	if len(m.Phone) > 0 {
		for _, s := range m.Phone {
			l = len(s)
			n += 1 + l + sovNotice(uint64(l))
		}
	}
	return n
}

func (m *SendSmsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovNotice(uint64(m.Code))
	}
	return n
}

func (m *SendEmailRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Strategy != 0 {
		n += 1 + sovNotice(uint64(m.Strategy))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovNotice(uint64(l))
	}
	l = len(m.Body)
	if l > 0 {
		n += 1 + l + sovNotice(uint64(l))
	}
	if len(m.RecipientList) > 0 {
		for _, s := range m.RecipientList {
			l = len(s)
			n += 1 + l + sovNotice(uint64(l))
		}
	}
	return n
}

func (m *SendEmailResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovNotice(uint64(m.Code))
	}
	return n
}

func sovNotice(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNotice(x uint64) (n int) {
	return sovNotice(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SendSmsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNotice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendSmsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendSmsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Strategy", wireType)
			}
			m.Strategy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Strategy |= SmsStrategy(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNotice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNotice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNotice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNotice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = append(m.Phone, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNotice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNotice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNotice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendSmsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNotice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendSmsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendSmsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNotice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNotice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNotice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendEmailRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNotice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendEmailRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendEmailRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Strategy", wireType)
			}
			m.Strategy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Strategy |= SMTPStrategy(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNotice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNotice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNotice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNotice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecipientList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNotice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNotice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecipientList = append(m.RecipientList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNotice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNotice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNotice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendEmailResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNotice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendEmailResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendEmailResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNotice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNotice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNotice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNotice(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNotice
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNotice
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthNotice
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowNotice
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipNotice(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthNotice
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthNotice = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNotice   = fmt.Errorf("proto: integer overflow")
)
