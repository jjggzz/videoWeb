// Code generated by sqlxgen. DO NOT EDIT.
package repository

import (
	"time"
)

type VideoExample struct {
	criteria []struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}
}

func (ex *VideoExample) Clear() *VideoExample {
	ex.criteria = []struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{}
	return ex
}

func (ex *VideoExample) AndIdIsNull() *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and id is null", noValue: true})
	return ex
}

func (ex *VideoExample) AndIdIsNotNull() *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and id is not null", noValue: true})
	return ex
}

func (ex *VideoExample) AndIdEqualTo(param int64) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and id = ?", param1: param})
	return ex
}

func (ex *VideoExample) AndIdNotEqualTo(param int64) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and id <> ?", param1: param})
	return ex
}

func (ex *VideoExample) AndIdGreaterThan(param int64) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and id > ?", param1: param})
	return ex
}

func (ex *VideoExample) AndIdGreaterThanOrEqualTo(param int64) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and id >= ?", param1: param})
	return ex
}
func (ex *VideoExample) AndIdLessThan(param int64) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and id < ?", param1: param})
	return ex
}

func (ex *VideoExample) AndIdLessThanOrEqualTo(param int64) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and id <= ?", param1: param})
	return ex
}

func (ex *VideoExample) AndIdIn(param []int64) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and id in (?)", param1: param})
	return ex
}

func (ex *VideoExample) AndIdNotIn(param []int64) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and id not in (?)", param1: param})
	return ex
}

func (ex *VideoExample) AndIdBetween(param1 int64, param2 int64) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and id between ? and ?", param1: param1, param2: param2, betweenValue: true})
	return ex
}

func (ex *VideoExample) AndIdNotBetween(param1 int64, param2 int64) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and id not between ? and ?", param1: param1, param2: param2, betweenValue: true})
	return ex
}

func (ex *VideoExample) AndAccessKeyIsNull() *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and access_key is null", noValue: true})
	return ex
}

func (ex *VideoExample) AndAccessKeyIsNotNull() *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and access_key is not null", noValue: true})
	return ex
}

func (ex *VideoExample) AndAccessKeyEqualTo(param string) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and access_key = ?", param1: param})
	return ex
}

func (ex *VideoExample) AndAccessKeyNotEqualTo(param string) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and access_key <> ?", param1: param})
	return ex
}

func (ex *VideoExample) AndAccessKeyGreaterThan(param string) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and access_key > ?", param1: param})
	return ex
}

func (ex *VideoExample) AndAccessKeyGreaterThanOrEqualTo(param string) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and access_key >= ?", param1: param})
	return ex
}
func (ex *VideoExample) AndAccessKeyLessThan(param string) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and access_key < ?", param1: param})
	return ex
}

func (ex *VideoExample) AndAccessKeyLessThanOrEqualTo(param string) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and access_key <= ?", param1: param})
	return ex
}

func (ex *VideoExample) AndAccessKeyIn(param []string) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and access_key in (?)", param1: param})
	return ex
}

func (ex *VideoExample) AndAccessKeyNotIn(param []string) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and access_key not in (?)", param1: param})
	return ex
}

func (ex *VideoExample) AndAccessKeyBetween(param1 string, param2 string) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and access_key between ? and ?", param1: param1, param2: param2, betweenValue: true})
	return ex
}

func (ex *VideoExample) AndAccessKeyNotBetween(param1 string, param2 string) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and access_key not between ? and ?", param1: param1, param2: param2, betweenValue: true})
	return ex
}

func (ex *VideoExample) AndAccessKeyLike(param string) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and access_key like ?", param1: param})
	return ex
}
func (ex *VideoExample) AndAccessKeyNotLike(param string) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and access_key not like ?", param1: param})
	return ex
}

func (ex *VideoExample) AndCreateTimeIsNull() *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and create_time is null", noValue: true})
	return ex
}

func (ex *VideoExample) AndCreateTimeIsNotNull() *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and create_time is not null", noValue: true})
	return ex
}

func (ex *VideoExample) AndCreateTimeEqualTo(param *time.Time) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and create_time = ?", param1: param})
	return ex
}

func (ex *VideoExample) AndCreateTimeNotEqualTo(param *time.Time) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and create_time <> ?", param1: param})
	return ex
}

func (ex *VideoExample) AndCreateTimeGreaterThan(param *time.Time) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and create_time > ?", param1: param})
	return ex
}

func (ex *VideoExample) AndCreateTimeGreaterThanOrEqualTo(param *time.Time) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and create_time >= ?", param1: param})
	return ex
}
func (ex *VideoExample) AndCreateTimeLessThan(param *time.Time) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and create_time < ?", param1: param})
	return ex
}

func (ex *VideoExample) AndCreateTimeLessThanOrEqualTo(param *time.Time) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and create_time <= ?", param1: param})
	return ex
}

func (ex *VideoExample) AndCreateTimeIn(param []*time.Time) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and create_time in (?)", param1: param})
	return ex
}

func (ex *VideoExample) AndCreateTimeNotIn(param []*time.Time) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and create_time not in (?)", param1: param})
	return ex
}

func (ex *VideoExample) AndCreateTimeBetween(param1 *time.Time, param2 *time.Time) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and create_time between ? and ?", param1: param1, param2: param2, betweenValue: true})
	return ex
}

func (ex *VideoExample) AndCreateTimeNotBetween(param1 *time.Time, param2 *time.Time) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and create_time not between ? and ?", param1: param1, param2: param2, betweenValue: true})
	return ex
}

func (ex *VideoExample) AndUpdateTimeIsNull() *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and update_time is null", noValue: true})
	return ex
}

func (ex *VideoExample) AndUpdateTimeIsNotNull() *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and update_time is not null", noValue: true})
	return ex
}

func (ex *VideoExample) AndUpdateTimeEqualTo(param *time.Time) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and update_time = ?", param1: param})
	return ex
}

func (ex *VideoExample) AndUpdateTimeNotEqualTo(param *time.Time) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and update_time <> ?", param1: param})
	return ex
}

func (ex *VideoExample) AndUpdateTimeGreaterThan(param *time.Time) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and update_time > ?", param1: param})
	return ex
}

func (ex *VideoExample) AndUpdateTimeGreaterThanOrEqualTo(param *time.Time) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and update_time >= ?", param1: param})
	return ex
}
func (ex *VideoExample) AndUpdateTimeLessThan(param *time.Time) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and update_time < ?", param1: param})
	return ex
}

func (ex *VideoExample) AndUpdateTimeLessThanOrEqualTo(param *time.Time) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and update_time <= ?", param1: param})
	return ex
}

func (ex *VideoExample) AndUpdateTimeIn(param []*time.Time) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and update_time in (?)", param1: param})
	return ex
}

func (ex *VideoExample) AndUpdateTimeNotIn(param []*time.Time) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and update_time not in (?)", param1: param})
	return ex
}

func (ex *VideoExample) AndUpdateTimeBetween(param1 *time.Time, param2 *time.Time) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and update_time between ? and ?", param1: param1, param2: param2, betweenValue: true})
	return ex
}

func (ex *VideoExample) AndUpdateTimeNotBetween(param1 *time.Time, param2 *time.Time) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and update_time not between ? and ?", param1: param1, param2: param2, betweenValue: true})
	return ex
}

func (ex *VideoExample) AndDeleteStatusIsNull() *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and delete_status is null", noValue: true})
	return ex
}

func (ex *VideoExample) AndDeleteStatusIsNotNull() *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and delete_status is not null", noValue: true})
	return ex
}

func (ex *VideoExample) AndDeleteStatusEqualTo(param int32) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and delete_status = ?", param1: param})
	return ex
}

func (ex *VideoExample) AndDeleteStatusNotEqualTo(param int32) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and delete_status <> ?", param1: param})
	return ex
}

func (ex *VideoExample) AndDeleteStatusGreaterThan(param int32) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and delete_status > ?", param1: param})
	return ex
}

func (ex *VideoExample) AndDeleteStatusGreaterThanOrEqualTo(param int32) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and delete_status >= ?", param1: param})
	return ex
}
func (ex *VideoExample) AndDeleteStatusLessThan(param int32) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and delete_status < ?", param1: param})
	return ex
}

func (ex *VideoExample) AndDeleteStatusLessThanOrEqualTo(param int32) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and delete_status <= ?", param1: param})
	return ex
}

func (ex *VideoExample) AndDeleteStatusIn(param []int32) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and delete_status in (?)", param1: param})
	return ex
}

func (ex *VideoExample) AndDeleteStatusNotIn(param []int32) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and delete_status not in (?)", param1: param})
	return ex
}

func (ex *VideoExample) AndDeleteStatusBetween(param1 int32, param2 int32) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and delete_status between ? and ?", param1: param1, param2: param2, betweenValue: true})
	return ex
}

func (ex *VideoExample) AndDeleteStatusNotBetween(param1 int32, param2 int32) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and delete_status not between ? and ?", param1: param1, param2: param2, betweenValue: true})
	return ex
}

func (ex *VideoExample) AndCustomerIdIsNull() *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and customer_id is null", noValue: true})
	return ex
}

func (ex *VideoExample) AndCustomerIdIsNotNull() *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and customer_id is not null", noValue: true})
	return ex
}

func (ex *VideoExample) AndCustomerIdEqualTo(param int64) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and customer_id = ?", param1: param})
	return ex
}

func (ex *VideoExample) AndCustomerIdNotEqualTo(param int64) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and customer_id <> ?", param1: param})
	return ex
}

func (ex *VideoExample) AndCustomerIdGreaterThan(param int64) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and customer_id > ?", param1: param})
	return ex
}

func (ex *VideoExample) AndCustomerIdGreaterThanOrEqualTo(param int64) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and customer_id >= ?", param1: param})
	return ex
}
func (ex *VideoExample) AndCustomerIdLessThan(param int64) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and customer_id < ?", param1: param})
	return ex
}

func (ex *VideoExample) AndCustomerIdLessThanOrEqualTo(param int64) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and customer_id <= ?", param1: param})
	return ex
}

func (ex *VideoExample) AndCustomerIdIn(param []int64) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and customer_id in (?)", param1: param})
	return ex
}

func (ex *VideoExample) AndCustomerIdNotIn(param []int64) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and customer_id not in (?)", param1: param})
	return ex
}

func (ex *VideoExample) AndCustomerIdBetween(param1 int64, param2 int64) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and customer_id between ? and ?", param1: param1, param2: param2, betweenValue: true})
	return ex
}

func (ex *VideoExample) AndCustomerIdNotBetween(param1 int64, param2 int64) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and customer_id not between ? and ?", param1: param1, param2: param2, betweenValue: true})
	return ex
}

func (ex *VideoExample) AndVideoNameIsNull() *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and video_name is null", noValue: true})
	return ex
}

func (ex *VideoExample) AndVideoNameIsNotNull() *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and video_name is not null", noValue: true})
	return ex
}

func (ex *VideoExample) AndVideoNameEqualTo(param string) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and video_name = ?", param1: param})
	return ex
}

func (ex *VideoExample) AndVideoNameNotEqualTo(param string) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and video_name <> ?", param1: param})
	return ex
}

func (ex *VideoExample) AndVideoNameGreaterThan(param string) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and video_name > ?", param1: param})
	return ex
}

func (ex *VideoExample) AndVideoNameGreaterThanOrEqualTo(param string) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and video_name >= ?", param1: param})
	return ex
}
func (ex *VideoExample) AndVideoNameLessThan(param string) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and video_name < ?", param1: param})
	return ex
}

func (ex *VideoExample) AndVideoNameLessThanOrEqualTo(param string) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and video_name <= ?", param1: param})
	return ex
}

func (ex *VideoExample) AndVideoNameIn(param []string) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and video_name in (?)", param1: param})
	return ex
}

func (ex *VideoExample) AndVideoNameNotIn(param []string) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and video_name not in (?)", param1: param})
	return ex
}

func (ex *VideoExample) AndVideoNameBetween(param1 string, param2 string) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and video_name between ? and ?", param1: param1, param2: param2, betweenValue: true})
	return ex
}

func (ex *VideoExample) AndVideoNameNotBetween(param1 string, param2 string) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and video_name not between ? and ?", param1: param1, param2: param2, betweenValue: true})
	return ex
}

func (ex *VideoExample) AndVideoNameLike(param string) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and video_name like ?", param1: param})
	return ex
}
func (ex *VideoExample) AndVideoNameNotLike(param string) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and video_name not like ?", param1: param})
	return ex
}

func (ex *VideoExample) AndVideoIntroductionIsNull() *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and video_introduction is null", noValue: true})
	return ex
}

func (ex *VideoExample) AndVideoIntroductionIsNotNull() *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and video_introduction is not null", noValue: true})
	return ex
}

func (ex *VideoExample) AndVideoIntroductionEqualTo(param string) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and video_introduction = ?", param1: param})
	return ex
}

func (ex *VideoExample) AndVideoIntroductionNotEqualTo(param string) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and video_introduction <> ?", param1: param})
	return ex
}

func (ex *VideoExample) AndVideoIntroductionGreaterThan(param string) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and video_introduction > ?", param1: param})
	return ex
}

func (ex *VideoExample) AndVideoIntroductionGreaterThanOrEqualTo(param string) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and video_introduction >= ?", param1: param})
	return ex
}
func (ex *VideoExample) AndVideoIntroductionLessThan(param string) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and video_introduction < ?", param1: param})
	return ex
}

func (ex *VideoExample) AndVideoIntroductionLessThanOrEqualTo(param string) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and video_introduction <= ?", param1: param})
	return ex
}

func (ex *VideoExample) AndVideoIntroductionIn(param []string) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and video_introduction in (?)", param1: param})
	return ex
}

func (ex *VideoExample) AndVideoIntroductionNotIn(param []string) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and video_introduction not in (?)", param1: param})
	return ex
}

func (ex *VideoExample) AndVideoIntroductionBetween(param1 string, param2 string) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and video_introduction between ? and ?", param1: param1, param2: param2, betweenValue: true})
	return ex
}

func (ex *VideoExample) AndVideoIntroductionNotBetween(param1 string, param2 string) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and video_introduction not between ? and ?", param1: param1, param2: param2, betweenValue: true})
	return ex
}

func (ex *VideoExample) AndVideoIntroductionLike(param string) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and video_introduction like ?", param1: param})
	return ex
}
func (ex *VideoExample) AndVideoIntroductionNotLike(param string) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and video_introduction not like ?", param1: param})
	return ex
}

func (ex *VideoExample) AndVideoCoverPathIsNull() *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and video_cover_path is null", noValue: true})
	return ex
}

func (ex *VideoExample) AndVideoCoverPathIsNotNull() *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and video_cover_path is not null", noValue: true})
	return ex
}

func (ex *VideoExample) AndVideoCoverPathEqualTo(param string) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and video_cover_path = ?", param1: param})
	return ex
}

func (ex *VideoExample) AndVideoCoverPathNotEqualTo(param string) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and video_cover_path <> ?", param1: param})
	return ex
}

func (ex *VideoExample) AndVideoCoverPathGreaterThan(param string) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and video_cover_path > ?", param1: param})
	return ex
}

func (ex *VideoExample) AndVideoCoverPathGreaterThanOrEqualTo(param string) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and video_cover_path >= ?", param1: param})
	return ex
}
func (ex *VideoExample) AndVideoCoverPathLessThan(param string) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and video_cover_path < ?", param1: param})
	return ex
}

func (ex *VideoExample) AndVideoCoverPathLessThanOrEqualTo(param string) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and video_cover_path <= ?", param1: param})
	return ex
}

func (ex *VideoExample) AndVideoCoverPathIn(param []string) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and video_cover_path in (?)", param1: param})
	return ex
}

func (ex *VideoExample) AndVideoCoverPathNotIn(param []string) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and video_cover_path not in (?)", param1: param})
	return ex
}

func (ex *VideoExample) AndVideoCoverPathBetween(param1 string, param2 string) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and video_cover_path between ? and ?", param1: param1, param2: param2, betweenValue: true})
	return ex
}

func (ex *VideoExample) AndVideoCoverPathNotBetween(param1 string, param2 string) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and video_cover_path not between ? and ?", param1: param1, param2: param2, betweenValue: true})
	return ex
}

func (ex *VideoExample) AndVideoCoverPathLike(param string) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and video_cover_path like ?", param1: param})
	return ex
}
func (ex *VideoExample) AndVideoCoverPathNotLike(param string) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and video_cover_path not like ?", param1: param})
	return ex
}

func (ex *VideoExample) AndVideoSourcePathIsNull() *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and video_source_path is null", noValue: true})
	return ex
}

func (ex *VideoExample) AndVideoSourcePathIsNotNull() *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and video_source_path is not null", noValue: true})
	return ex
}

func (ex *VideoExample) AndVideoSourcePathEqualTo(param string) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and video_source_path = ?", param1: param})
	return ex
}

func (ex *VideoExample) AndVideoSourcePathNotEqualTo(param string) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and video_source_path <> ?", param1: param})
	return ex
}

func (ex *VideoExample) AndVideoSourcePathGreaterThan(param string) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and video_source_path > ?", param1: param})
	return ex
}

func (ex *VideoExample) AndVideoSourcePathGreaterThanOrEqualTo(param string) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and video_source_path >= ?", param1: param})
	return ex
}
func (ex *VideoExample) AndVideoSourcePathLessThan(param string) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and video_source_path < ?", param1: param})
	return ex
}

func (ex *VideoExample) AndVideoSourcePathLessThanOrEqualTo(param string) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and video_source_path <= ?", param1: param})
	return ex
}

func (ex *VideoExample) AndVideoSourcePathIn(param []string) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and video_source_path in (?)", param1: param})
	return ex
}

func (ex *VideoExample) AndVideoSourcePathNotIn(param []string) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and video_source_path not in (?)", param1: param})
	return ex
}

func (ex *VideoExample) AndVideoSourcePathBetween(param1 string, param2 string) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and video_source_path between ? and ?", param1: param1, param2: param2, betweenValue: true})
	return ex
}

func (ex *VideoExample) AndVideoSourcePathNotBetween(param1 string, param2 string) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and video_source_path not between ? and ?", param1: param1, param2: param2, betweenValue: true})
	return ex
}

func (ex *VideoExample) AndVideoSourcePathLike(param string) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and video_source_path like ?", param1: param})
	return ex
}
func (ex *VideoExample) AndVideoSourcePathNotLike(param string) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and video_source_path not like ?", param1: param})
	return ex
}

func (ex *VideoExample) AndVideoSizeIsNull() *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and video_size is null", noValue: true})
	return ex
}

func (ex *VideoExample) AndVideoSizeIsNotNull() *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and video_size is not null", noValue: true})
	return ex
}

func (ex *VideoExample) AndVideoSizeEqualTo(param int64) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and video_size = ?", param1: param})
	return ex
}

func (ex *VideoExample) AndVideoSizeNotEqualTo(param int64) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and video_size <> ?", param1: param})
	return ex
}

func (ex *VideoExample) AndVideoSizeGreaterThan(param int64) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and video_size > ?", param1: param})
	return ex
}

func (ex *VideoExample) AndVideoSizeGreaterThanOrEqualTo(param int64) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and video_size >= ?", param1: param})
	return ex
}
func (ex *VideoExample) AndVideoSizeLessThan(param int64) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and video_size < ?", param1: param})
	return ex
}

func (ex *VideoExample) AndVideoSizeLessThanOrEqualTo(param int64) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and video_size <= ?", param1: param})
	return ex
}

func (ex *VideoExample) AndVideoSizeIn(param []int64) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and video_size in (?)", param1: param})
	return ex
}

func (ex *VideoExample) AndVideoSizeNotIn(param []int64) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and video_size not in (?)", param1: param})
	return ex
}

func (ex *VideoExample) AndVideoSizeBetween(param1 int64, param2 int64) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and video_size between ? and ?", param1: param1, param2: param2, betweenValue: true})
	return ex
}

func (ex *VideoExample) AndVideoSizeNotBetween(param1 int64, param2 int64) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and video_size not between ? and ?", param1: param1, param2: param2, betweenValue: true})
	return ex
}

func (ex *VideoExample) AndVideoThumbsCountIsNull() *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and video_thumbs_count is null", noValue: true})
	return ex
}

func (ex *VideoExample) AndVideoThumbsCountIsNotNull() *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and video_thumbs_count is not null", noValue: true})
	return ex
}

func (ex *VideoExample) AndVideoThumbsCountEqualTo(param int64) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and video_thumbs_count = ?", param1: param})
	return ex
}

func (ex *VideoExample) AndVideoThumbsCountNotEqualTo(param int64) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and video_thumbs_count <> ?", param1: param})
	return ex
}

func (ex *VideoExample) AndVideoThumbsCountGreaterThan(param int64) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and video_thumbs_count > ?", param1: param})
	return ex
}

func (ex *VideoExample) AndVideoThumbsCountGreaterThanOrEqualTo(param int64) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and video_thumbs_count >= ?", param1: param})
	return ex
}
func (ex *VideoExample) AndVideoThumbsCountLessThan(param int64) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and video_thumbs_count < ?", param1: param})
	return ex
}

func (ex *VideoExample) AndVideoThumbsCountLessThanOrEqualTo(param int64) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and video_thumbs_count <= ?", param1: param})
	return ex
}

func (ex *VideoExample) AndVideoThumbsCountIn(param []int64) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and video_thumbs_count in (?)", param1: param})
	return ex
}

func (ex *VideoExample) AndVideoThumbsCountNotIn(param []int64) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and video_thumbs_count not in (?)", param1: param})
	return ex
}

func (ex *VideoExample) AndVideoThumbsCountBetween(param1 int64, param2 int64) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and video_thumbs_count between ? and ?", param1: param1, param2: param2, betweenValue: true})
	return ex
}

func (ex *VideoExample) AndVideoThumbsCountNotBetween(param1 int64, param2 int64) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and video_thumbs_count not between ? and ?", param1: param1, param2: param2, betweenValue: true})
	return ex
}

func (ex *VideoExample) AndVideoPlayCountIsNull() *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and video_play_count is null", noValue: true})
	return ex
}

func (ex *VideoExample) AndVideoPlayCountIsNotNull() *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and video_play_count is not null", noValue: true})
	return ex
}

func (ex *VideoExample) AndVideoPlayCountEqualTo(param int64) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and video_play_count = ?", param1: param})
	return ex
}

func (ex *VideoExample) AndVideoPlayCountNotEqualTo(param int64) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and video_play_count <> ?", param1: param})
	return ex
}

func (ex *VideoExample) AndVideoPlayCountGreaterThan(param int64) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and video_play_count > ?", param1: param})
	return ex
}

func (ex *VideoExample) AndVideoPlayCountGreaterThanOrEqualTo(param int64) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and video_play_count >= ?", param1: param})
	return ex
}
func (ex *VideoExample) AndVideoPlayCountLessThan(param int64) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and video_play_count < ?", param1: param})
	return ex
}

func (ex *VideoExample) AndVideoPlayCountLessThanOrEqualTo(param int64) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and video_play_count <= ?", param1: param})
	return ex
}

func (ex *VideoExample) AndVideoPlayCountIn(param []int64) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and video_play_count in (?)", param1: param})
	return ex
}

func (ex *VideoExample) AndVideoPlayCountNotIn(param []int64) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and video_play_count not in (?)", param1: param})
	return ex
}

func (ex *VideoExample) AndVideoPlayCountBetween(param1 int64, param2 int64) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and video_play_count between ? and ?", param1: param1, param2: param2, betweenValue: true})
	return ex
}

func (ex *VideoExample) AndVideoPlayCountNotBetween(param1 int64, param2 int64) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and video_play_count not between ? and ?", param1: param1, param2: param2, betweenValue: true})
	return ex
}

func (ex *VideoExample) AndVideoCommentCountIsNull() *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and video_comment_count is null", noValue: true})
	return ex
}

func (ex *VideoExample) AndVideoCommentCountIsNotNull() *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and video_comment_count is not null", noValue: true})
	return ex
}

func (ex *VideoExample) AndVideoCommentCountEqualTo(param int64) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and video_comment_count = ?", param1: param})
	return ex
}

func (ex *VideoExample) AndVideoCommentCountNotEqualTo(param int64) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and video_comment_count <> ?", param1: param})
	return ex
}

func (ex *VideoExample) AndVideoCommentCountGreaterThan(param int64) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and video_comment_count > ?", param1: param})
	return ex
}

func (ex *VideoExample) AndVideoCommentCountGreaterThanOrEqualTo(param int64) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and video_comment_count >= ?", param1: param})
	return ex
}
func (ex *VideoExample) AndVideoCommentCountLessThan(param int64) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and video_comment_count < ?", param1: param})
	return ex
}

func (ex *VideoExample) AndVideoCommentCountLessThanOrEqualTo(param int64) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and video_comment_count <= ?", param1: param})
	return ex
}

func (ex *VideoExample) AndVideoCommentCountIn(param []int64) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and video_comment_count in (?)", param1: param})
	return ex
}

func (ex *VideoExample) AndVideoCommentCountNotIn(param []int64) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and video_comment_count not in (?)", param1: param})
	return ex
}

func (ex *VideoExample) AndVideoCommentCountBetween(param1 int64, param2 int64) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and video_comment_count between ? and ?", param1: param1, param2: param2, betweenValue: true})
	return ex
}

func (ex *VideoExample) AndVideoCommentCountNotBetween(param1 int64, param2 int64) *VideoExample {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and video_comment_count not between ? and ?", param1: param1, param2: param2, betweenValue: true})
	return ex
}
