// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: video.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type UploadVideoRequest struct {
	CustomerId        int64  `protobuf:"varint,1,opt,name=customerId,proto3" json:"customerId,omitempty"`
	VideoSourcePath   string `protobuf:"bytes,2,opt,name=videoSourcePath,proto3" json:"videoSourcePath,omitempty"`
	VideoCoverPath    string `protobuf:"bytes,3,opt,name=videoCoverPath,proto3" json:"videoCoverPath,omitempty"`
	VideoSize         int64  `protobuf:"varint,4,opt,name=VideoSize,proto3" json:"VideoSize,omitempty"`
	VideoName         string `protobuf:"bytes,5,opt,name=VideoName,proto3" json:"VideoName,omitempty"`
	VideoIntroduction string `protobuf:"bytes,6,opt,name=videoIntroduction,proto3" json:"videoIntroduction,omitempty"`
}

func (m *UploadVideoRequest) Reset()         { *m = UploadVideoRequest{} }
func (m *UploadVideoRequest) String() string { return proto.CompactTextString(m) }
func (*UploadVideoRequest) ProtoMessage()    {}
func (*UploadVideoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ad4ea8866efb1e3, []int{0}
}
func (m *UploadVideoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UploadVideoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UploadVideoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UploadVideoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadVideoRequest.Merge(m, src)
}
func (m *UploadVideoRequest) XXX_Size() int {
	return m.Size()
}
func (m *UploadVideoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadVideoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UploadVideoRequest proto.InternalMessageInfo

func (m *UploadVideoRequest) GetCustomerId() int64 {
	if m != nil {
		return m.CustomerId
	}
	return 0
}

func (m *UploadVideoRequest) GetVideoSourcePath() string {
	if m != nil {
		return m.VideoSourcePath
	}
	return ""
}

func (m *UploadVideoRequest) GetVideoCoverPath() string {
	if m != nil {
		return m.VideoCoverPath
	}
	return ""
}

func (m *UploadVideoRequest) GetVideoSize() int64 {
	if m != nil {
		return m.VideoSize
	}
	return 0
}

func (m *UploadVideoRequest) GetVideoName() string {
	if m != nil {
		return m.VideoName
	}
	return ""
}

func (m *UploadVideoRequest) GetVideoIntroduction() string {
	if m != nil {
		return m.VideoIntroduction
	}
	return ""
}

type UploadVideoResponse struct {
	Code int64 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
}

func (m *UploadVideoResponse) Reset()         { *m = UploadVideoResponse{} }
func (m *UploadVideoResponse) String() string { return proto.CompactTextString(m) }
func (*UploadVideoResponse) ProtoMessage()    {}
func (*UploadVideoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ad4ea8866efb1e3, []int{1}
}
func (m *UploadVideoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UploadVideoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UploadVideoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UploadVideoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadVideoResponse.Merge(m, src)
}
func (m *UploadVideoResponse) XXX_Size() int {
	return m.Size()
}
func (m *UploadVideoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadVideoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UploadVideoResponse proto.InternalMessageInfo

func (m *UploadVideoResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func init() {
	proto.RegisterType((*UploadVideoRequest)(nil), "proto.UploadVideoRequest")
	proto.RegisterType((*UploadVideoResponse)(nil), "proto.UploadVideoResponse")
}

func init() { proto.RegisterFile("video.proto", fileDescriptor_0ad4ea8866efb1e3) }

var fileDescriptor_0ad4ea8866efb1e3 = []byte{
	// 265 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2e, 0xcb, 0x4c, 0x49,
	0xcd, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x53, 0x4a, 0x1f, 0x18, 0xb9, 0x84,
	0x42, 0x0b, 0x72, 0xf2, 0x13, 0x53, 0xc2, 0x40, 0x92, 0x41, 0xa9, 0x85, 0xa5, 0xa9, 0xc5, 0x25,
	0x42, 0x72, 0x5c, 0x5c, 0xc9, 0xa5, 0xc5, 0x25, 0xf9, 0xb9, 0xa9, 0x45, 0x9e, 0x29, 0x12, 0x8c,
	0x0a, 0x8c, 0x1a, 0xcc, 0x41, 0x48, 0x22, 0x42, 0x1a, 0x5c, 0xfc, 0x60, 0xc3, 0x82, 0xf3, 0x4b,
	0x8b, 0x92, 0x53, 0x03, 0x12, 0x4b, 0x32, 0x24, 0x98, 0x14, 0x18, 0x35, 0x38, 0x83, 0xd0, 0x85,
	0x85, 0xd4, 0xb8, 0xf8, 0xc0, 0x42, 0xce, 0xf9, 0x65, 0xa9, 0x45, 0x60, 0x85, 0xcc, 0x60, 0x85,
	0x68, 0xa2, 0x42, 0x32, 0x5c, 0x9c, 0x60, 0x17, 0x04, 0x67, 0x56, 0xa5, 0x4a, 0xb0, 0x80, 0x2d,
	0x44, 0x08, 0xc0, 0x65, 0xfd, 0x12, 0x73, 0x53, 0x25, 0x58, 0xc1, 0x06, 0x20, 0x04, 0x84, 0x74,
	0xb8, 0x04, 0xc1, 0xa6, 0x79, 0xe6, 0x95, 0x14, 0xe5, 0xa7, 0x94, 0x26, 0x97, 0x64, 0xe6, 0xe7,
	0x49, 0xb0, 0x81, 0x55, 0x61, 0x4a, 0x28, 0x69, 0x72, 0x09, 0xa3, 0xf8, 0xb8, 0xb8, 0x20, 0x3f,
	0xaf, 0x38, 0x55, 0x48, 0x88, 0x8b, 0x25, 0x39, 0x3f, 0x25, 0x15, 0xea, 0x59, 0x30, 0xdb, 0xc8,
	0x9f, 0x8b, 0x15, 0xac, 0x48, 0xc8, 0x8d, 0x8b, 0x1b, 0x49, 0x8f, 0x90, 0x24, 0x24, 0x10, 0xf5,
	0x30, 0x43, 0x4e, 0x4a, 0x0a, 0x9b, 0x14, 0xc4, 0x0a, 0x25, 0x06, 0x27, 0x89, 0x13, 0x8f, 0xe4,
	0x18, 0x2f, 0x3c, 0x92, 0x63, 0x7c, 0xf0, 0x48, 0x8e, 0x71, 0xc2, 0x63, 0x39, 0x86, 0x0b, 0x8f,
	0xe5, 0x18, 0x6e, 0x3c, 0x96, 0x63, 0x48, 0x62, 0x03, 0x6b, 0x33, 0x06, 0x04, 0x00, 0x00, 0xff,
	0xff, 0x4b, 0x8b, 0x84, 0x57, 0xa5, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// VideoClient is the client API for Video service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VideoClient interface {
	UploadVideo(ctx context.Context, in *UploadVideoRequest, opts ...grpc.CallOption) (*UploadVideoResponse, error)
}

type videoClient struct {
	cc *grpc.ClientConn
}

func NewVideoClient(cc *grpc.ClientConn) VideoClient {
	return &videoClient{cc}
}

func (c *videoClient) UploadVideo(ctx context.Context, in *UploadVideoRequest, opts ...grpc.CallOption) (*UploadVideoResponse, error) {
	out := new(UploadVideoResponse)
	err := c.cc.Invoke(ctx, "/proto.Video/UploadVideo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VideoServer is the server API for Video service.
type VideoServer interface {
	UploadVideo(context.Context, *UploadVideoRequest) (*UploadVideoResponse, error)
}

// UnimplementedVideoServer can be embedded to have forward compatible implementations.
type UnimplementedVideoServer struct {
}

func (*UnimplementedVideoServer) UploadVideo(ctx context.Context, req *UploadVideoRequest) (*UploadVideoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadVideo not implemented")
}

func RegisterVideoServer(s *grpc.Server, srv VideoServer) {
	s.RegisterService(&_Video_serviceDesc, srv)
}

func _Video_UploadVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadVideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServer).UploadVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Video/UploadVideo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServer).UploadVideo(ctx, req.(*UploadVideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Video_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Video",
	HandlerType: (*VideoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadVideo",
			Handler:    _Video_UploadVideo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "video.proto",
}

func (m *UploadVideoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UploadVideoRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CustomerId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVideo(dAtA, i, uint64(m.CustomerId))
	}
	if len(m.VideoSourcePath) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintVideo(dAtA, i, uint64(len(m.VideoSourcePath)))
		i += copy(dAtA[i:], m.VideoSourcePath)
	}
	if len(m.VideoCoverPath) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintVideo(dAtA, i, uint64(len(m.VideoCoverPath)))
		i += copy(dAtA[i:], m.VideoCoverPath)
	}
	if m.VideoSize != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintVideo(dAtA, i, uint64(m.VideoSize))
	}
	if len(m.VideoName) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintVideo(dAtA, i, uint64(len(m.VideoName)))
		i += copy(dAtA[i:], m.VideoName)
	}
	if len(m.VideoIntroduction) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintVideo(dAtA, i, uint64(len(m.VideoIntroduction)))
		i += copy(dAtA[i:], m.VideoIntroduction)
	}
	return i, nil
}

func (m *UploadVideoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UploadVideoResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVideo(dAtA, i, uint64(m.Code))
	}
	return i, nil
}

func encodeVarintVideo(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *UploadVideoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CustomerId != 0 {
		n += 1 + sovVideo(uint64(m.CustomerId))
	}
	l = len(m.VideoSourcePath)
	if l > 0 {
		n += 1 + l + sovVideo(uint64(l))
	}
	l = len(m.VideoCoverPath)
	if l > 0 {
		n += 1 + l + sovVideo(uint64(l))
	}
	if m.VideoSize != 0 {
		n += 1 + sovVideo(uint64(m.VideoSize))
	}
	l = len(m.VideoName)
	if l > 0 {
		n += 1 + l + sovVideo(uint64(l))
	}
	l = len(m.VideoIntroduction)
	if l > 0 {
		n += 1 + l + sovVideo(uint64(l))
	}
	return n
}

func (m *UploadVideoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovVideo(uint64(m.Code))
	}
	return n
}

func sovVideo(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozVideo(x uint64) (n int) {
	return sovVideo(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UploadVideoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVideo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UploadVideoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UploadVideoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomerId", wireType)
			}
			m.CustomerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CustomerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VideoSourcePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVideo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVideo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VideoSourcePath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VideoCoverPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVideo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVideo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VideoCoverPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VideoSize", wireType)
			}
			m.VideoSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VideoSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VideoName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVideo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVideo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VideoName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VideoIntroduction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVideo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVideo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VideoIntroduction = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVideo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVideo
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVideo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UploadVideoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVideo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UploadVideoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UploadVideoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVideo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVideo
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVideo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVideo(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVideo
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVideo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVideo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthVideo
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthVideo
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowVideo
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipVideo(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthVideo
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthVideo = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVideo   = fmt.Errorf("proto: integer overflow")
)
